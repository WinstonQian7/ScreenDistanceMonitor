# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import json
import sys
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Dialog(object):
    fpath_user_settings = "user_settings/settings/user_settings.json"
    fpath_default_settings = "user_settings/settings/default_settings.json"
    fpath_cam_user = "user_settings/camera_specifications/camSpecs.json"
    fpath_cam_calibration = "user_settings/camera_specifications/camSpecs_calibration.json"
    fpath_cam_calibration = "user_settings/camera_specifications/camSpecs_default.json" #have to use
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(640, 480)
        self.tabWidget = QtWidgets.QTabWidget(Dialog)
        self.tabWidget.setGeometry(QtCore.QRect(20, 20, 600, 420))
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setElideMode(QtCore.Qt.ElideLeft)
        self.tabWidget.setMovable(False)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.frame = QtWidgets.QFrame(self.tab)
        self.frame.setGeometry(QtCore.QRect(260, 40, 300, 300))
        self.frame.setAutoFillBackground(True)
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setLineWidth(3)
        self.frame.setMidLineWidth(0)
        self.frame.setObjectName("frame")
        self.pushButton = QtWidgets.QPushButton(self.tab)
        self.pushButton.setGeometry(QtCore.QRect(40, 120, 170, 40))
        self.pushButton.setDefault(True)
        self.pushButton.setFlat(False)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.tab)
        self.pushButton_2.setGeometry(QtCore.QRect(40, 170, 170, 40))
        self.pushButton_2.setObjectName("pushButton_2")
        self.radioButton = QtWidgets.QRadioButton(self.tab)
        self.radioButton.setGeometry(QtCore.QRect(20, 370, 61, 17))
        self.radioButton.setObjectName("radioButton")
        self.checkBox = QtWidgets.QCheckBox(self.tab)
        self.checkBox.setGeometry(QtCore.QRect(20, 220, 231, 21))
        self.checkBox.setObjectName("checkBox")
        self.checkBox_2 = QtWidgets.QCheckBox(self.tab)
        self.checkBox_2.setGeometry(QtCore.QRect(20, 240, 141, 17))
        self.checkBox_2.setCheckable(True)
        self.checkBox_2.setChecked(True)
        self.checkBox_2.setObjectName("checkBox_2")
        self.label = QtWidgets.QLabel(self.tab)
        self.label.setGeometry(QtCore.QRect(80, 340, 141, 16))
        self.label.setObjectName("label")
        self.radioButton_2 = QtWidgets.QRadioButton(self.tab)
        self.radioButton_2.setGeometry(QtCore.QRect(90, 370, 61, 17))
        self.radioButton_2.setChecked(True)
        self.radioButton_2.setObjectName("radioButton_2")
        self.lineEdit = QtWidgets.QLineEdit(self.tab)
        self.lineEdit.setGeometry(QtCore.QRect(20, 340, 51, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(self.tab)
        self.label_2.setGeometry(QtCore.QRect(330, 10, 160, 20))
        font = QtGui.QFont()
        font.setFamily("Microsoft Sans Serif")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_2.setTextFormat(QtCore.Qt.RichText)
        self.label_2.setObjectName("label_2")
        self.textBrowser = QtWidgets.QTextBrowser(self.tab)
        self.textBrowser.setGeometry(QtCore.QRect(10, 40, 220, 60))
        self.textBrowser.setObjectName("textBrowser")
        self.label_3 = QtWidgets.QLabel(self.tab)
        self.label_3.setGeometry(QtCore.QRect(50, 10, 141, 20))
        font = QtGui.QFont()
        font.setFamily("Microsoft Sans Serif")
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_3.setTextFormat(QtCore.Qt.RichText)
        self.label_3.setObjectName("label_3")
        self.checkBox_3 = QtWidgets.QCheckBox(self.tab)
        self.checkBox_3.setGeometry(QtCore.QRect(20, 260, 161, 17))
        self.checkBox_3.setObjectName("checkBox_3")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_5.setGeometry(QtCore.QRect(20, 280, 51, 20))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.label_5 = QtWidgets.QLabel(self.tab)
        self.label_5.setGeometry(QtCore.QRect(80, 280, 161, 31))
        self.label_5.setWordWrap(True)
        self.label_5.setObjectName("label_5")
        self.buttonBox = QtWidgets.QDialogButtonBox(self.tab)
        self.buttonBox.setGeometry(QtCore.QRect(160, 360, 621, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Apply|QtWidgets.QDialogButtonBox.RestoreDefaults)
        self.buttonBox.setCenterButtons(True)
        self.buttonBox.setObjectName("buttonBox")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_6.setGeometry(QtCore.QRect(20, 310, 51, 20))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.label_15 = QtWidgets.QLabel(self.tab)
        self.label_15.setGeometry(QtCore.QRect(80, 310, 161, 31))
        self.label_15.setWordWrap(True)
        self.label_15.setObjectName("label_15")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.label_4 = QtWidgets.QLabel(self.tab_2)
        self.label_4.setGeometry(QtCore.QRect(30, 10, 421, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_4.setFont(font)
        self.label_4.setWordWrap(True)
        self.label_4.setObjectName("label_4")
        self.label_6 = QtWidgets.QLabel(self.tab_2)
        self.label_6.setGeometry(QtCore.QRect(30, 60, 421, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_6.setFont(font)
        self.label_6.setWordWrap(True)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.tab_2)
        self.label_7.setGeometry(QtCore.QRect(30, 110, 511, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_7.setFont(font)
        self.label_7.setWordWrap(True)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.tab_2)
        self.label_8.setGeometry(QtCore.QRect(30, 180, 521, 91))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_8.setFont(font)
        self.label_8.setWordWrap(True)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.tab_2)
        self.label_9.setGeometry(QtCore.QRect(30, 300, 551, 91))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_9.setFont(font)
        self.label_9.setWordWrap(True)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.tab_2)
        self.label_10.setGeometry(QtCore.QRect(30, 270, 421, 20))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_10.setFont(font)
        self.label_10.setWordWrap(True)
        self.label_10.setObjectName("label_10")
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_2.setGeometry(QtCore.QRect(60, 50, 113, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_3.setGeometry(QtCore.QRect(60, 100, 113, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_11 = QtWidgets.QLabel(self.tab_3)
        self.label_11.setGeometry(QtCore.QRect(200, 50, 241, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.tab_3)
        self.label_12.setGeometry(QtCore.QRect(200, 90, 221, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_12.setFont(font)
        self.label_12.setWordWrap(True)
        self.label_12.setObjectName("label_12")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_4.setGeometry(QtCore.QRect(60, 150, 113, 20))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_13 = QtWidgets.QLabel(self.tab_3)
        self.label_13.setGeometry(QtCore.QRect(200, 150, 221, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_13.setFont(font)
        self.label_13.setWordWrap(True)
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.tab_3)
        self.label_14.setGeometry(QtCore.QRect(60, 210, 461, 131))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_14.setFont(font)
        self.label_14.setWordWrap(True)
        self.label_14.setObjectName("label_14")
        self.tabWidget.addTab(self.tab_3, "")
       
        self.retranslateUi(Dialog)
        self.load_settings()

        self.tabWidget.setCurrentIndex(0)
        self.buttonBox.clicked.connect(self.handle_apply_reset)
        #self.buttonBox.accepted.connect(self.accept)
        #self.buttonBox.rejected.connect(self.reject)
        #QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "EyeDistanceApp"))
        self.pushButton.setText(_translate("Dialog", "Start Detection"))
        self.pushButton_2.setText(_translate("Dialog", "Stop Detection"))
        self.radioButton.setText(_translate("Dialog", "seconds"))
        self.checkBox.setText(_translate("Dialog", "Display detected eyes (May slow computer)"))
        self.checkBox_2.setText(_translate("Dialog", "Display distance "))
        self.label.setText(_translate("Dialog", "Notification cooldown period"))
        self.radioButton_2.setText(_translate("Dialog", "minutes"))
        self.lineEdit.setText(_translate("Dialog", "3"))
        self.label_2.setText(_translate("Dialog", "Display detected eyes"))
        self.label_3.setText(_translate("Dialog", "Displayed distance"))
        self.checkBox_3.setText(_translate("Dialog", "Use Camera Calibration Mode"))
        self.label_5.setText(_translate("Dialog", "Enter Displayed Distance in Inches (option 1)"))
        self.lineEdit_6.setText(_translate("Dialog", "12"))
        self.label_15.setText(_translate("Dialog", "Enter Measured Distance in Inches (option 1)"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Dialog", "Start Menu"))
        self.label_4.setText(_translate("Dialog", "Step 1 - Go to start Menu and check the use camera calibration mode box. Then press apply"))
        self.label_6.setText(_translate("Dialog", "Step 2 - Click on start detection and grab a ruler"))
        self.label_7.setText(_translate("Dialog", "Step 3 - Place the ruler on the computer webcam and measure 12 inches straight outward from the screen "))
        self.label_8.setText(_translate("Dialog", "Step 4 - Move your face to the 12 inches mark and make sure a displayed distance is being detected (make sure displayed distance is consistent)"))
        self.label_9.setText(_translate("Dialog", "Step 6 - Record the displayed distance and measured distance in the Enter Displayed/Measured Distance (option 1) box (displayed distance may be different from measured distance) and click apply button"))
        self.label_10.setText(_translate("Dialog", "Step 5 - Stop Detection"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Dialog", "Camera Calibration - Option 1"))
        self.label_11.setText(_translate("Dialog", "Camera Focal Length in mm"))
        self.label_12.setText(_translate("Dialog", "Camera sensor size in mm (width)"))
        self.label_13.setText(_translate("Dialog", "Camera sensor size in mm (height)"))
        self.label_14.setText(_translate("Dialog", "Instructions: Focal length or sensor size, width and height, need to be filled out. It is also acceptable to enter both focal length and sensor size information. *Please use option 1 if distance displayed isn\'t accurate"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("Dialog", "Camera Calibration - Option 2"))

    def display_detected_eyes(self):
        if self.checkBox.isChecked() == True:
            return True
        else:
            return False

    def display_distance(self):
        if self.checkBox_2.isChecked() == True:
            return True 
        else:
            return False

    def camera_calibration_option_one(self):
        if self.checkBox_3.isChecked() == True:
            return True
        else:
            return False
    
    def get_enter_display_distance(self):
        return self.lineEdit_5.text()

    def get_enter_measured_distance(self):
        return self.lineEdit_6.text()

    def get_notification_cooldown(self):
        return self.lineEdit.text()

    def get_seconds_or_minutes(self):
        if self.radioButton.isChecked() == True:
            return True #seconds
        else:
            return False #minutes

    def validate_string(self, txt):
        txt = txt.replace(".","")
        if txt == "":
            return True
        if txt.isdigit() and txt.count(".") <= 1:
            return True
        elif int(txt) < 0:
            return False
        return False

    def accept(self):
        fpath_user_settings = Ui_Dialog.fpath_user_settings
        try:
            with open(fpath_user_settings, 'r') as json_file:
                settings = json.load(json_file)
        except OSError:
            print("Could not open/read file", fpath_user_settings)
        settings["display_detected_eyes"] = self.display_detected_eyes()
        settings["display_distance"] = self.display_distance()
        settings["camera_calibration"] = self.camera_calibration_option_one()
        displayed_distance = self.get_enter_display_distance()
        measured_distance = self.get_enter_measured_distance()
        notification_cooldown = self.get_notification_cooldown()
        if self.validate_string(displayed_distance) == True:
            settings["displayed_distance"] = self.get_enter_display_distance()
        if self.validate_string(measured_distance) == True:
            settings["measured_distance"] = self.get_enter_measured_distance()
        if self.validate_string(notification_cooldown) == True:
            settings["notification_cooldown"] = self.get_notification_cooldown()
        settings["seconds_or_minutes"] = self.get_seconds_or_minutes()
        try:
            with open(fpath_user_settings, 'w') as json_file:
                json.dump(settings , json_file, indent=4)
        except OSError:
            print("Could not open/write file",fpath_user_settings)
    
    def reset(self):
        fpath_default_settings = Ui_Dialog.fpath_default_settings
        fpath_user_settings = Ui_Dialog.fpath_user_settings
        try:
            with open(fpath_default_settings, 'r') as json_file:
                settings = json.load(json_file)
        except OSError:
            print("Could not open/read file", fpath_default_settings)
        try:
            with open(fpath_user_settings, 'w') as json_file:
                json.dump(settings, json_file, indent=4)
        except OSError:
            print("Could not open/write file",fpath_user_settings)
        self.load_settings()
      
    def handle_apply_reset(self,button):
        std_b = self.buttonBox.standardButton(button)
        if std_b == QtWidgets.QDialogButtonBox.Apply:
            self.accept()
        elif std_b == QtWidgets.QDialogButtonBox.RestoreDefaults:
            self.reset()

    def settings_hashtable(self):
        settings = {
         0:self.checkBox,
         1:self.checkBox_2,
         2:self.checkBox_3,
         3:self.lineEdit_5,
         4:self.lineEdit_6,
         5:self.lineEdit,
         6:(self.radioButton,self.radioButton_2)
        }
        return settings

    def load_settings(self):
        fpath_user_settings = Ui_Dialog.fpath_user_settings
        try:
            with open(fpath_user_settings, 'r') as json_file:
                settings = json.load(json_file)
        except OSError:
            print("Could not open/read file", fpath_user_settings)
        checkbox = ["display_detected_eyes","display_distance","camera_calibration"]
        textfield = ["displayed_distance","measured_distance","notification_cooldown"]
        widget_id = self.settings_hashtable()
        count = 0
        for box_id in checkbox:
            if settings[box_id] == True:
                widget_id[count].setChecked(True)
            else:
                widget_id[count].setChecked(False)
            count+=1
        for field_id in textfield:
            if settings[field_id] == None:
                widget_id[count].setText("")
            else:
                widget_id[count].setText(str(settings[field_id]))
            count+=1
        if settings["seconds_or_minutes"] == True:
            widget_id[count][0].setChecked(True)
        else:
            widget_id[count][1].setChecked(True)

    def start_detection(self):
        fpath_user_settings = Ui_Dialog.fpath_user_settings
        try:
            with open(fpath_user_settings,'r') as json_file:
                settings = json.load(json_file)
        except OSError:
            print("Could not open/read file", file_user_settings)
        for key,val in settings:
            if key == "display_detected_eyes":
                display_image = val
            elif key == "display_distance":
                info = val
            elif key == "camera_calibration":
                fpath_cam_user = "" #fix
                fpath_cam_calibration = "" #fix
                try:
                    with open(fpath_cam_calibration,'r') as json_file:
                        cam_calibration = json.load(json_file)
                except OSError:
                    print("Could not open/read file", fpath_cam_calibration)
                try:
                    with open(fpath_cam_user,'w') as json_file:
                        json.dump(cam_calibration, json_file, indent=4)
                except:
                    print("Could not open/write file",fpath_user_settings)
            elif key == "notification_cooldown":
                sleep_time = val
            elif key == "seconds_or_minutes":
                seconds_or_minutes = val #true - seconds, false - minutes
        if settings["displayed_distance"] != None and settings["measured_distance"] != None:
            adj_factor = measured_distance - displayed_distance 

        #rundetection()
        
    def stop_detection(self):
        pass

if __name__ == "__main__":
    if hasattr(QtCore.Qt, 'AA_EnableHighDpiScaling'):
        QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)
    if hasattr(QtCore.Qt, 'AA_UseHighDpiPixmaps'):
        QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True)
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
